// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=11e49c8315abb29e78624a422091b59d1fd7b447$
//

#include "libcef_dll/ctocpp/media_access_handler_ctocpp.h"
#include "libcef_dll/cpptoc/browser_cpptoc.h"
#include "libcef_dll/cpptoc/media_access_callback_cpptoc.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
bool CefMediaAccessHandlerCToCpp::OnRequestMediaAccessPermission(
    CefRefPtr<CefBrowser> browser,
    const CefString& requesting_url,
    int32_t requested_permissions,
    CefRefPtr<CefMediaAccessCallback> callback) {
  cef_media_access_handler_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, on_request_media_access_permission))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get())
    return false;
  // Verify param: requesting_url; type: string_byref_const
  DCHECK(!requesting_url.empty());
  if (requesting_url.empty())
    return false;
  // Verify param: callback; type: refptr_diff
  DCHECK(callback.get());
  if (!callback.get())
    return false;

  // Execute
  int _retval = _struct->on_request_media_access_permission(
      _struct, CefBrowserCppToC::Wrap(browser), requesting_url.GetStruct(),
      requested_permissions, CefMediaAccessCallbackCppToC::Wrap(callback));

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

CefMediaAccessHandlerCToCpp::CefMediaAccessHandlerCToCpp() {}

template <>
cef_media_access_handler_t* CefCToCppRefCounted<
    CefMediaAccessHandlerCToCpp,
    CefMediaAccessHandler,
    cef_media_access_handler_t>::UnwrapDerived(CefWrapperType type,
                                               CefMediaAccessHandler* c) {
  NOTREACHED() << "Unexpected class type: " << type;
  return NULL;
}

#if DCHECK_IS_ON()
template <>
base::AtomicRefCount CefCToCppRefCounted<CefMediaAccessHandlerCToCpp,
                                         CefMediaAccessHandler,
                                         cef_media_access_handler_t>::DebugObjCt
    ATOMIC_DECLARATION;
#endif

template <>
CefWrapperType CefCToCppRefCounted<CefMediaAccessHandlerCToCpp,
                                   CefMediaAccessHandler,
                                   cef_media_access_handler_t>::kWrapperType =
    WT_MEDIA_ACCESS_HANDLER;

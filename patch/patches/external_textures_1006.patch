diff --git content/browser/compositor/browser_compositor_output_surface.cc content/browser/compositor/browser_compositor_output_surface.cc
index d96efe91eea8..1345025b6fd8 100644
--- content/browser/compositor/browser_compositor_output_surface.cc
+++ content/browser/compositor/browser_compositor_output_surface.cc
@@ -62,6 +62,10 @@ void BrowserCompositorOutputSurface::SetReflector(ReflectorImpl* reflector) {
   OnReflectorChanged();
 }
 
+void* BrowserCompositorOutputSurface::GetSharedTexture() const {
+  return nullptr;
+}
+
 void BrowserCompositorOutputSurface::OnReflectorChanged() {
 }
 
diff --git content/browser/compositor/browser_compositor_output_surface.h content/browser/compositor/browser_compositor_output_surface.h
index 941d70bd2a7e..ef14a7dd7d4f 100644
--- content/browser/compositor/browser_compositor_output_surface.h
+++ content/browser/compositor/browser_compositor_output_surface.h
@@ -41,6 +41,8 @@ class CONTENT_EXPORT BrowserCompositorOutputSurface
 
   void SetReflector(ReflectorImpl* reflector);
 
+  virtual void* GetSharedTexture() const;
+
   // Called when |reflector_| was updated.
   virtual void OnReflectorChanged();
 
diff --git content/browser/compositor/gpu_process_transport_factory.cc content/browser/compositor/gpu_process_transport_factory.cc
index e8741caf69a8..1f82cc8c1f29 100644
--- content/browser/compositor/gpu_process_transport_factory.cc
+++ content/browser/compositor/gpu_process_transport_factory.cc
@@ -208,6 +208,18 @@ GpuProcessTransportFactory::~GpuProcessTransportFactory() {
   task_graph_runner_->Shutdown();
 }
 
+void* GpuProcessTransportFactory::GetSharedTexture(ui::Compositor* compositor) {
+  PerCompositorDataMap::iterator it = per_compositor_data_.find(compositor);
+  if (it == per_compositor_data_.end())
+    return nullptr;
+  PerCompositorData* data = it->second.get();
+  DCHECK(data);
+
+  if (data->display_output_surface)
+    return data->display_output_surface->GetSharedTexture();
+  return nullptr;
+}
+
 std::unique_ptr<viz::SoftwareOutputDevice>
 GpuProcessTransportFactory::CreateSoftwareOutputDevice(
     gfx::AcceleratedWidget widget,
@@ -492,11 +504,20 @@ void GpuProcessTransportFactory::EstablishedGpuChannel(
         // surfaces as they are not following the correct mode.
         DisableGpuCompositing(compositor.get());
       }
+
+      std::unique_ptr<viz::SoftwareOutputDevice> output_device;
+      if (compositor->delegate()) {
+        output_device = compositor->delegate()->CreateSoftwareOutputDevice(
+            compositor.get());
+      }
+      if (!output_device) {
+        output_device = CreateSoftwareOutputDevice(compositor->widget(),
+                                                   compositor->task_runner());
+      }
+
       display_output_surface =
           std::make_unique<SoftwareBrowserCompositorOutputSurface>(
-              CreateSoftwareOutputDevice(compositor->widget(),
-                                         compositor->task_runner()),
-              std::move(vsync_callback));
+              std::move(output_device), std::move(vsync_callback));
     } else {
       DCHECK(context_provider);
       const auto& capabilities = context_provider->ContextCapabilities();
@@ -504,7 +525,8 @@ void GpuProcessTransportFactory::EstablishedGpuChannel(
         display_output_surface =
             std::make_unique<OffscreenBrowserCompositorOutputSurface>(
                 context_provider, std::move(vsync_callback),
-                std::unique_ptr<viz::CompositorOverlayCandidateValidator>());
+                std::unique_ptr<viz::CompositorOverlayCandidateValidator>(),
+                compositor->shared_texture_enabled());
       } else if (capabilities.surfaceless) {
 #if defined(OS_MACOSX)
         const auto& gpu_feature_info = context_provider->GetGpuFeatureInfo();
@@ -946,7 +968,8 @@ GpuProcessTransportFactory::CreatePerCompositorData(
   gfx::AcceleratedWidget widget = compositor->widget();
 
   auto data = std::make_unique<PerCompositorData>();
-  if (widget == gfx::kNullAcceleratedWidget) {
+  if (widget == gfx::kNullAcceleratedWidget ||
+      compositor->shared_texture_enabled()) {
     data->surface_handle = gpu::kNullSurfaceHandle;
   } else {
 #if defined(GPU_SURFACE_HANDLE_IS_ACCELERATED_WINDOW)
diff --git content/browser/compositor/gpu_process_transport_factory.h content/browser/compositor/gpu_process_transport_factory.h
index b9f2cf332cd4..59b2d12aa3b0 100644
--- content/browser/compositor/gpu_process_transport_factory.h
+++ content/browser/compositor/gpu_process_transport_factory.h
@@ -102,6 +102,7 @@ class GpuProcessTransportFactory : public ui::ContextFactory,
   void IssueExternalBeginFrame(ui::Compositor* compositor,
                                const viz::BeginFrameArgs& args) override;
   void SetOutputIsSecure(ui::Compositor* compositor, bool secure) override;
+  void* GetSharedTexture(ui::Compositor* compositor) override;
 
   // ImageTransportFactory implementation.
   void DisableGpuCompositing() override;
diff --git content/browser/compositor/offscreen_browser_compositor_output_surface.cc content/browser/compositor/offscreen_browser_compositor_output_surface.cc
index b5f5874e8fa2..c292a6b10269 100644
--- content/browser/compositor/offscreen_browser_compositor_output_surface.cc
+++ content/browser/compositor/offscreen_browser_compositor_output_surface.cc
@@ -33,10 +33,12 @@ OffscreenBrowserCompositorOutputSurface::
         scoped_refptr<ws::ContextProviderCommandBuffer> context,
         const UpdateVSyncParametersCallback& update_vsync_parameters_callback,
         std::unique_ptr<viz::CompositorOverlayCandidateValidator>
-            overlay_candidate_validator)
+            overlay_candidate_validator,
+        bool shared_texture_enabled)
     : BrowserCompositorOutputSurface(std::move(context),
                                      update_vsync_parameters_callback,
                                      std::move(overlay_candidate_validator)),
+      shared_texture_enabled_(shared_texture_enabled),
       weak_ptr_factory_(this) {
   capabilities_.uses_default_gl_framebuffer = false;
 }
@@ -46,6 +48,10 @@ OffscreenBrowserCompositorOutputSurface::
   DiscardBackbuffer();
 }
 
+void* OffscreenBrowserCompositorOutputSurface::GetSharedTexture() const {
+  return (void*)shared_handle_;
+}
+
 void OffscreenBrowserCompositorOutputSurface::BindToClient(
     viz::OutputSurfaceClient* client) {
   DCHECK(client);
@@ -54,42 +60,72 @@ void OffscreenBrowserCompositorOutputSurface::BindToClient(
 }
 
 void OffscreenBrowserCompositorOutputSurface::EnsureBackbuffer() {
-  bool update_source_texture = !reflector_texture_ || reflector_changed_;
-  reflector_changed_ = false;
-  if (!reflector_texture_) {
-    reflector_texture_.reset(new ReflectorTexture(context_provider()));
-
-    GLES2Interface* gl = context_provider_->ContextGL();
-
-    const int max_texture_size =
-        context_provider_->ContextCapabilities().max_texture_size;
-    int texture_width = std::min(max_texture_size, reshape_size_.width());
-    int texture_height = std::min(max_texture_size, reshape_size_.height());
-
-    gl->BindTexture(GL_TEXTURE_2D, reflector_texture_->texture_id());
-    gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
-    gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
-    gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
-    gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
-    gl->TexImage2D(GL_TEXTURE_2D, 0, GLInternalFormat(kFboTextureFormat),
-                   texture_width, texture_height, 0,
-                   GLDataFormat(kFboTextureFormat),
-                   GLDataType(kFboTextureFormat), nullptr);
+  GLES2Interface* gl = context_provider_->ContextGL();
+
+  const int max_texture_size =
+      context_provider_->ContextCapabilities().max_texture_size;
+  int texture_width = std::min(max_texture_size, reshape_size_.width());
+  int texture_height = std::min(max_texture_size, reshape_size_.height());
+
+  GLuint color_attachment = 0;
+
+  if (shared_texture_enabled_) {
+    if (!shared_handle_ && (texture_width > 0) && (texture_height > 0)) {
+      gl->GenTextures(1, &shared_texture_);
+      gl->BindTexture(GL_TEXTURE_2D, shared_texture_);
+      gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+      gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+      gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
+      gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
+      shared_handle_ = gl->CreateSharedTexture(shared_texture_, texture_width,
+                                               texture_height);
+
+      if (shared_handle_) {
+        color_attachment = shared_texture_;
+      } else {
+        gl->DeleteTextures(1, &shared_texture_);
+        shared_texture_ = 0;
+      }
+    }
+  } else {
+    // The shared texture code above in theory could work with the reflector
+    // texture However, there were issues making associating it a shared surface
+    // and then attaching it to the FBO (incomplete?)
+    bool update_source_texture = !reflector_texture_ || reflector_changed_;
+    reflector_changed_ = false;
+    if (!reflector_texture_) {
+      reflector_texture_.reset(new ReflectorTexture(context_provider()));
+
+      gl->BindTexture(GL_TEXTURE_2D, reflector_texture_->texture_id());
+      gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+      gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+      gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
+      gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
+      gl->TexImage2D(GL_TEXTURE_2D, 0, GLInternalFormat(kFboTextureFormat),
+                     texture_width, texture_height, 0,
+                     GLDataFormat(kFboTextureFormat),
+                     GLDataType(kFboTextureFormat), nullptr);
+
+      color_attachment = reflector_texture_->texture_id();
+
+      // The reflector may be created later or detached and re-attached,
+      // so don't assume it always exists. For example, ChromeOS always
+      // creates a reflector asynchronosly when creating this for software
+      // mirroring.  See |DisplayManager::CreateMirrorWindowAsyncIfAny|.
+      if (reflector_ && update_source_texture)
+        reflector_->OnSourceTextureMailboxUpdated(
+            reflector_texture_->mailbox());
+    }
+  }
+
+  if (color_attachment) {
     if (!fbo_)
       gl->GenFramebuffers(1, &fbo_);
 
     gl->BindFramebuffer(GL_FRAMEBUFFER, fbo_);
     gl->FramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
-                             GL_TEXTURE_2D, reflector_texture_->texture_id(),
-                             0);
+                             GL_TEXTURE_2D, color_attachment, 0);
   }
-
-  // The reflector may be created later or detached and re-attached,
-  // so don't assume it always exists. For example, ChromeOS always
-  // creates a reflector asynchronosly when creating this for software
-  // mirroring.  See |DisplayManager::CreateMirrorWindowAsyncIfAny|.
-  if (reflector_ && update_source_texture)
-    reflector_->OnSourceTextureMailboxUpdated(reflector_texture_->mailbox());
 }
 
 void OffscreenBrowserCompositorOutputSurface::DiscardBackbuffer() {
@@ -101,6 +137,16 @@ void OffscreenBrowserCompositorOutputSurface::DiscardBackbuffer() {
       reflector_->OnSourceTextureMailboxUpdated(nullptr);
   }
 
+  if (shared_handle_) {
+    gl->DeleteSharedTexture(shared_handle_);
+    shared_handle_ = 0ull;
+  }
+
+  if (shared_texture_) {
+    gl->DeleteTextures(1, &shared_texture_);
+    shared_texture_ = 0;
+  }
+
   if (fbo_) {
     gl->BindFramebuffer(GL_FRAMEBUFFER, fbo_);
     gl->DeleteFramebuffers(1, &fbo_);
@@ -125,15 +171,20 @@ void OffscreenBrowserCompositorOutputSurface::Reshape(
 }
 
 void OffscreenBrowserCompositorOutputSurface::BindFramebuffer() {
-  bool need_to_bind = !!reflector_texture_.get();
+  GLES2Interface* gl = context_provider_->ContextGL();
 
+  bool need_to_bind = !!reflector_texture_.get();
   EnsureBackbuffer();
-  DCHECK(reflector_texture_.get());
   DCHECK(fbo_);
 
-  if (need_to_bind) {
-    GLES2Interface* gl = context_provider_->ContextGL();
+  if (shared_handle_) {
     gl->BindFramebuffer(GL_FRAMEBUFFER, fbo_);
+    gl->LockSharedTexture(shared_handle_);
+  } else {
+    DCHECK(reflector_texture_.get());
+    if (need_to_bind) {
+      gl->BindFramebuffer(GL_FRAMEBUFFER, fbo_);
+    }
   }
 }
 
@@ -154,6 +205,12 @@ void OffscreenBrowserCompositorOutputSurface::SwapBuffers(
   // The original implementation had a flickering issue (crbug.com/515332).
   gpu::gles2::GLES2Interface* gl = context_provider_->ContextGL();
 
+  // If using a shared texture we need to Flush.
+  if (shared_handle_) {
+    gl->UnlockSharedTexture(shared_handle_);
+    gl->Flush();
+  }
+
   gpu::SyncToken sync_token;
   gl->GenUnverifiedSyncTokenCHROMIUM(sync_token.GetData());
   context_provider_->ContextSupport()->SignalSyncToken(
@@ -195,8 +252,11 @@ void OffscreenBrowserCompositorOutputSurface::OnSwapBuffersComplete(
     bool need_presentation_feedback) {
   latency_tracker_.OnGpuSwapBuffersCompleted(latency_info);
   client_->DidReceiveSwapBuffersAck();
-  if (need_presentation_feedback)
-    client_->DidReceivePresentationFeedback(gfx::PresentationFeedback());
+  if (need_presentation_feedback) {
+    gfx::PresentationFeedback feedback;
+    feedback.timestamp = base::TimeTicks::Now();
+    client_->DidReceivePresentationFeedback(feedback);
+  }
 }
 
 #if BUILDFLAG(ENABLE_VULKAN)
diff --git content/browser/compositor/offscreen_browser_compositor_output_surface.h content/browser/compositor/offscreen_browser_compositor_output_surface.h
index 582388dd576c..103c9374e535 100644
--- content/browser/compositor/offscreen_browser_compositor_output_surface.h
+++ content/browser/compositor/offscreen_browser_compositor_output_surface.h
@@ -32,7 +32,8 @@ class OffscreenBrowserCompositorOutputSurface
       scoped_refptr<ws::ContextProviderCommandBuffer> context,
       const UpdateVSyncParametersCallback& update_vsync_parameters_callback,
       std::unique_ptr<viz::CompositorOverlayCandidateValidator>
-          overlay_candidate_validator);
+          overlay_candidate_validator,
+      bool shared_texture_enabled);
 
   ~OffscreenBrowserCompositorOutputSurface() override;
 
@@ -54,6 +55,8 @@ class OffscreenBrowserCompositorOutputSurface
   gfx::BufferFormat GetOverlayBufferFormat() const override;
   uint32_t GetFramebufferCopyTextureFormat() override;
 
+  void* GetSharedTexture() const override;
+
   // BrowserCompositorOutputSurface implementation.
   void OnReflectorChanged() override;
 
@@ -63,6 +66,8 @@ class OffscreenBrowserCompositorOutputSurface
 
   unsigned UpdateGpuFence() override;
 
+  void NotifyRenderHost(const std::vector<ui::LatencyInfo>& latency_info);
+
   void OnSwapBuffersComplete(const std::vector<ui::LatencyInfo>& latency_info,
                              bool need_presentation_feedback);
 
@@ -71,6 +76,11 @@ class OffscreenBrowserCompositorOutputSurface
   uint32_t fbo_ = 0;
   bool reflector_changed_ = false;
   std::unique_ptr<ReflectorTexture> reflector_texture_;
+
+  bool shared_texture_enabled_ = false;
+  uint64_t shared_handle_ = 0ull;
+  uint32_t shared_texture_ = 0;
+
   ui::LatencyTracker latency_tracker_;
   base::WeakPtrFactory<OffscreenBrowserCompositorOutputSurface>
       weak_ptr_factory_;
diff --git gpu/GLES2/gl2chromium_autogen.h gpu/GLES2/gl2chromium_autogen.h
index dc3f820d88da..1f3d09e169ac 100644
--- gpu/GLES2/gl2chromium_autogen.h
+++ gpu/GLES2/gl2chromium_autogen.h
@@ -404,6 +404,10 @@
   GLES2_GET_FUN(CreateClientGpuFenceCHROMIUM)
 #define glWaitGpuFenceCHROMIUM GLES2_GET_FUN(WaitGpuFenceCHROMIUM)
 #define glDestroyGpuFenceCHROMIUM GLES2_GET_FUN(DestroyGpuFenceCHROMIUM)
+#define glCreateSharedTexture GLES2_GET_FUN(CreateSharedTexture)
+#define glLockSharedTexture GLES2_GET_FUN(LockSharedTexture)
+#define glUnlockSharedTexture GLES2_GET_FUN(UnlockSharedTexture)
+#define glDeleteSharedTexture GLES2_GET_FUN(DeleteSharedTexture)
 #define glInvalidateReadbackBufferShadowDataCHROMIUM \
   GLES2_GET_FUN(InvalidateReadbackBufferShadowDataCHROMIUM)
 #define glFramebufferTextureMultiviewLayeredANGLE \
diff --git gpu/command_buffer/build_gles2_cmd_buffer.py gpu/command_buffer/build_gles2_cmd_buffer.py
index 70cae33c1387..06e6061cf654 100755
--- gpu/command_buffer/build_gles2_cmd_buffer.py
+++ gpu/command_buffer/build_gles2_cmd_buffer.py
@@ -4062,6 +4062,35 @@ _FUNCTION_INFO = {
     'extension': 'CHROMIUM_gpu_fence',
     'extension_flag': 'chromium_gpu_fence',
   },
+  'CreateSharedTexture': {
+    'type': 'Custom',
+    'data_transfer_methods': ['shm'],
+    'cmd_args': 'GLint texture_id, GLint width, '
+                'GLint height, GLuint64* result',
+    'result': ['GLuint64'],
+    'unit_test': False,
+    'impl_func': False,
+    'client_test': False,
+    'extension': True,
+  },
+  'LockSharedTexture': {
+    'type': 'Custom',
+    'unit_test': False,
+    'client_test': False,
+    'extension': True,
+  },
+  'UnlockSharedTexture': {
+    'type': 'Custom',
+    'unit_test': False,
+    'client_test': False,
+    'extension': True,
+  },
+  'DeleteSharedTexture': {
+    'type': 'Custom',
+    'unit_test': False,
+    'client_test': False,
+    'extension': True,
+  },
   'UnpremultiplyAndDitherCopyCHROMIUM': {
     'decoder_func': 'DoUnpremultiplyAndDitherCopyCHROMIUM',
     'cmd_args': 'GLuint source_id, GLuint dest_id, GLint x, GLint y, '
diff --git gpu/command_buffer/client/gles2_c_lib_autogen.h gpu/command_buffer/client/gles2_c_lib_autogen.h
index 8955befd7d46..0895962dbf70 100644
--- gpu/command_buffer/client/gles2_c_lib_autogen.h
+++ gpu/command_buffer/client/gles2_c_lib_autogen.h
@@ -1815,6 +1815,20 @@ void GL_APIENTRY GLES2WaitGpuFenceCHROMIUM(GLuint gpu_fence_id) {
 void GL_APIENTRY GLES2DestroyGpuFenceCHROMIUM(GLuint gpu_fence_id) {
   gles2::GetGLContext()->DestroyGpuFenceCHROMIUM(gpu_fence_id);
 }
+GLuint64 GL_APIENTRY GLES2CreateSharedTexture(GLuint texture_id,
+                                              GLsizei width,
+                                              GLsizei height) {
+  return gles2::GetGLContext()->CreateSharedTexture(texture_id, width, height);
+}
+void GL_APIENTRY GLES2LockSharedTexture(GLuint64 shared_handle) {
+  gles2::GetGLContext()->LockSharedTexture(shared_handle);
+}
+void GL_APIENTRY GLES2UnlockSharedTexture(GLuint64 shared_handle) {
+  gles2::GetGLContext()->UnlockSharedTexture(shared_handle);
+}
+void GL_APIENTRY GLES2DeleteSharedTexture(GLuint64 shared_handle) {
+  gles2::GetGLContext()->DeleteSharedTexture(shared_handle);
+}
 void GL_APIENTRY
 GLES2InvalidateReadbackBufferShadowDataCHROMIUM(GLuint buffer_id) {
   gles2::GetGLContext()->InvalidateReadbackBufferShadowDataCHROMIUM(buffer_id);
@@ -3196,6 +3210,22 @@ extern const NameToFunc g_gles2_function_table[] = {
         "glDestroyGpuFenceCHROMIUM",
         reinterpret_cast<GLES2FunctionPointer>(glDestroyGpuFenceCHROMIUM),
     },
+    {
+        "glCreateSharedTexture",
+        reinterpret_cast<GLES2FunctionPointer>(glCreateSharedTexture),
+    },
+    {
+        "glLockSharedTexture",
+        reinterpret_cast<GLES2FunctionPointer>(glLockSharedTexture),
+    },
+    {
+        "glUnlockSharedTexture",
+        reinterpret_cast<GLES2FunctionPointer>(glUnlockSharedTexture),
+    },
+    {
+        "glDeleteSharedTexture",
+        reinterpret_cast<GLES2FunctionPointer>(glDeleteSharedTexture),
+    },
     {
         "glInvalidateReadbackBufferShadowDataCHROMIUM",
         reinterpret_cast<GLES2FunctionPointer>(
diff --git gpu/command_buffer/client/gles2_cmd_helper_autogen.h gpu/command_buffer/client/gles2_cmd_helper_autogen.h
index b422c3075ae7..1c4b452d1df5 100644
--- gpu/command_buffer/client/gles2_cmd_helper_autogen.h
+++ gpu/command_buffer/client/gles2_cmd_helper_autogen.h
@@ -3356,6 +3356,42 @@ void DestroyGpuFenceCHROMIUM(GLuint gpu_fence_id) {
   }
 }
 
+void CreateSharedTexture(GLint texture_id,
+                         GLint width,
+                         GLint height,
+                         uint32_t result_shm_id,
+                         uint32_t result_shm_offset) {
+  gles2::cmds::CreateSharedTexture* c =
+      GetCmdSpace<gles2::cmds::CreateSharedTexture>();
+  if (c) {
+    c->Init(texture_id, width, height, result_shm_id, result_shm_offset);
+  }
+}
+
+void LockSharedTexture(GLuint64 shared_handle) {
+  gles2::cmds::LockSharedTexture* c =
+      GetCmdSpace<gles2::cmds::LockSharedTexture>();
+  if (c) {
+    c->Init(shared_handle);
+  }
+}
+
+void UnlockSharedTexture(GLuint64 shared_handle) {
+  gles2::cmds::UnlockSharedTexture* c =
+      GetCmdSpace<gles2::cmds::UnlockSharedTexture>();
+  if (c) {
+    c->Init(shared_handle);
+  }
+}
+
+void DeleteSharedTexture(GLuint64 shared_handle) {
+  gles2::cmds::DeleteSharedTexture* c =
+      GetCmdSpace<gles2::cmds::DeleteSharedTexture>();
+  if (c) {
+    c->Init(shared_handle);
+  }
+}
+
 void SetReadbackBufferShadowAllocationINTERNAL(GLuint buffer_id,
                                                GLint shm_id,
                                                GLuint shm_offset,
diff --git gpu/command_buffer/client/gles2_implementation.cc gpu/command_buffer/client/gles2_implementation.cc
index 65420b9c8bdb..38bb6176100d 100644
--- gpu/command_buffer/client/gles2_implementation.cc
+++ gpu/command_buffer/client/gles2_implementation.cc
@@ -7256,6 +7256,22 @@ void GLES2Implementation::Viewport(GLint x,
   CheckGLError();
 }
 
+GLuint64 GLES2Implementation::CreateSharedTexture(GLuint texture_id,
+                                                  GLsizei width,
+                                                  GLsizei height) {
+  typedef cmds::CreateSharedTexture::Result Result;
+  Result* result = GetResultAs<Result*>();
+  if (!result) {
+    return 0;
+  }
+  *result = 0;
+  helper_->CreateSharedTexture(texture_id, width, height, GetResultShmId(),
+                               GetResultShmOffset());
+
+  WaitForCmd();
+  return *result;
+}
+
 void GLES2Implementation::IssueBeginQuery(GLenum target,
                                           GLuint id,
                                           uint32_t sync_data_shm_id,
diff --git gpu/command_buffer/client/gles2_implementation_autogen.h gpu/command_buffer/client/gles2_implementation_autogen.h
index f99c002a599a..767cd62c1b77 100644
--- gpu/command_buffer/client/gles2_implementation_autogen.h
+++ gpu/command_buffer/client/gles2_implementation_autogen.h
@@ -1274,6 +1274,16 @@ void WaitGpuFenceCHROMIUM(GLuint gpu_fence_id) override;
 
 void DestroyGpuFenceCHROMIUM(GLuint gpu_fence_id) override;
 
+GLuint64 CreateSharedTexture(GLuint texture_id,
+                             GLsizei width,
+                             GLsizei height) override;
+
+void LockSharedTexture(GLuint64 shared_handle) override;
+
+void UnlockSharedTexture(GLuint64 shared_handle) override;
+
+void DeleteSharedTexture(GLuint64 shared_handle) override;
+
 void InvalidateReadbackBufferShadowDataCHROMIUM(GLuint buffer_id) override;
 
 void FramebufferTextureMultiviewLayeredANGLE(GLenum target,
diff --git gpu/command_buffer/client/gles2_implementation_impl_autogen.h gpu/command_buffer/client/gles2_implementation_impl_autogen.h
index 68b2e032a189..e78fab69aa01 100644
--- gpu/command_buffer/client/gles2_implementation_impl_autogen.h
+++ gpu/command_buffer/client/gles2_implementation_impl_autogen.h
@@ -3664,6 +3664,30 @@ void GLES2Implementation::DestroyGpuFenceCHROMIUM(GLuint gpu_fence_id) {
   CheckGLError();
 }
 
+void GLES2Implementation::LockSharedTexture(GLuint64 shared_handle) {
+  GPU_CLIENT_SINGLE_THREAD_CHECK();
+  GPU_CLIENT_LOG("[" << GetLogPrefix() << "] glLockSharedTexture("
+                     << shared_handle << ")");
+  helper_->LockSharedTexture(shared_handle);
+  CheckGLError();
+}
+
+void GLES2Implementation::UnlockSharedTexture(GLuint64 shared_handle) {
+  GPU_CLIENT_SINGLE_THREAD_CHECK();
+  GPU_CLIENT_LOG("[" << GetLogPrefix() << "] glUnlockSharedTexture("
+                     << shared_handle << ")");
+  helper_->UnlockSharedTexture(shared_handle);
+  CheckGLError();
+}
+
+void GLES2Implementation::DeleteSharedTexture(GLuint64 shared_handle) {
+  GPU_CLIENT_SINGLE_THREAD_CHECK();
+  GPU_CLIENT_LOG("[" << GetLogPrefix() << "] glDeleteSharedTexture("
+                     << shared_handle << ")");
+  helper_->DeleteSharedTexture(shared_handle);
+  CheckGLError();
+}
+
 void GLES2Implementation::FramebufferTextureMultiviewLayeredANGLE(
     GLenum target,
     GLenum attachment,
diff --git gpu/command_buffer/client/gles2_interface_autogen.h gpu/command_buffer/client/gles2_interface_autogen.h
index 3e117895a4fc..ac79f035ecdb 100644
--- gpu/command_buffer/client/gles2_interface_autogen.h
+++ gpu/command_buffer/client/gles2_interface_autogen.h
@@ -949,6 +949,12 @@ virtual GLuint CreateGpuFenceCHROMIUM() = 0;
 virtual GLuint CreateClientGpuFenceCHROMIUM(ClientGpuFence source) = 0;
 virtual void WaitGpuFenceCHROMIUM(GLuint gpu_fence_id) = 0;
 virtual void DestroyGpuFenceCHROMIUM(GLuint gpu_fence_id) = 0;
+virtual GLuint64 CreateSharedTexture(GLuint texture_id,
+                                     GLsizei width,
+                                     GLsizei height) = 0;
+virtual void LockSharedTexture(GLuint64 shared_handle) = 0;
+virtual void UnlockSharedTexture(GLuint64 shared_handle) = 0;
+virtual void DeleteSharedTexture(GLuint64 shared_handle) = 0;
 virtual void InvalidateReadbackBufferShadowDataCHROMIUM(GLuint buffer_id) = 0;
 virtual void FramebufferTextureMultiviewLayeredANGLE(GLenum target,
                                                      GLenum attachment,
diff --git gpu/command_buffer/client/gles2_interface_stub_autogen.h gpu/command_buffer/client/gles2_interface_stub_autogen.h
index 79f46804f4ff..57235e0e1dde 100644
--- gpu/command_buffer/client/gles2_interface_stub_autogen.h
+++ gpu/command_buffer/client/gles2_interface_stub_autogen.h
@@ -919,6 +919,12 @@ GLuint CreateGpuFenceCHROMIUM() override;
 GLuint CreateClientGpuFenceCHROMIUM(ClientGpuFence source) override;
 void WaitGpuFenceCHROMIUM(GLuint gpu_fence_id) override;
 void DestroyGpuFenceCHROMIUM(GLuint gpu_fence_id) override;
+GLuint64 CreateSharedTexture(GLuint texture_id,
+                             GLsizei width,
+                             GLsizei height) override;
+void LockSharedTexture(GLuint64 shared_handle) override;
+void UnlockSharedTexture(GLuint64 shared_handle) override;
+void DeleteSharedTexture(GLuint64 shared_handle) override;
 void InvalidateReadbackBufferShadowDataCHROMIUM(GLuint buffer_id) override;
 void FramebufferTextureMultiviewLayeredANGLE(GLenum target,
                                              GLenum attachment,
diff --git gpu/command_buffer/client/gles2_interface_stub_impl_autogen.h gpu/command_buffer/client/gles2_interface_stub_impl_autogen.h
index c186b690ed0a..8e2d04caaff6 100644
--- gpu/command_buffer/client/gles2_interface_stub_impl_autogen.h
+++ gpu/command_buffer/client/gles2_interface_stub_impl_autogen.h
@@ -1234,6 +1234,14 @@ GLuint GLES2InterfaceStub::CreateClientGpuFenceCHROMIUM(
 }
 void GLES2InterfaceStub::WaitGpuFenceCHROMIUM(GLuint /* gpu_fence_id */) {}
 void GLES2InterfaceStub::DestroyGpuFenceCHROMIUM(GLuint /* gpu_fence_id */) {}
+GLuint64 GLES2InterfaceStub::CreateSharedTexture(GLuint /* texture_id */,
+                                                 GLsizei /* width */,
+                                                 GLsizei /* height */) {
+  return 0;
+}
+void GLES2InterfaceStub::LockSharedTexture(GLuint64 /* shared_handle */) {}
+void GLES2InterfaceStub::UnlockSharedTexture(GLuint64 /* shared_handle */) {}
+void GLES2InterfaceStub::DeleteSharedTexture(GLuint64 /* shared_handle */) {}
 void GLES2InterfaceStub::InvalidateReadbackBufferShadowDataCHROMIUM(
     GLuint /* buffer_id */) {}
 void GLES2InterfaceStub::FramebufferTextureMultiviewLayeredANGLE(
diff --git gpu/command_buffer/client/gles2_trace_implementation_autogen.h gpu/command_buffer/client/gles2_trace_implementation_autogen.h
index 916cf238a69e..6228d124f402 100644
--- gpu/command_buffer/client/gles2_trace_implementation_autogen.h
+++ gpu/command_buffer/client/gles2_trace_implementation_autogen.h
@@ -919,6 +919,12 @@ GLuint CreateGpuFenceCHROMIUM() override;
 GLuint CreateClientGpuFenceCHROMIUM(ClientGpuFence source) override;
 void WaitGpuFenceCHROMIUM(GLuint gpu_fence_id) override;
 void DestroyGpuFenceCHROMIUM(GLuint gpu_fence_id) override;
+GLuint64 CreateSharedTexture(GLuint texture_id,
+                             GLsizei width,
+                             GLsizei height) override;
+void LockSharedTexture(GLuint64 shared_handle) override;
+void UnlockSharedTexture(GLuint64 shared_handle) override;
+void DeleteSharedTexture(GLuint64 shared_handle) override;
 void InvalidateReadbackBufferShadowDataCHROMIUM(GLuint buffer_id) override;
 void FramebufferTextureMultiviewLayeredANGLE(GLenum target,
                                              GLenum attachment,
diff --git gpu/command_buffer/client/gles2_trace_implementation_impl_autogen.h gpu/command_buffer/client/gles2_trace_implementation_impl_autogen.h
index 30f99889c379..b6b16f139df4 100644
--- gpu/command_buffer/client/gles2_trace_implementation_impl_autogen.h
+++ gpu/command_buffer/client/gles2_trace_implementation_impl_autogen.h
@@ -2632,6 +2632,28 @@ void GLES2TraceImplementation::DestroyGpuFenceCHROMIUM(GLuint gpu_fence_id) {
   gl_->DestroyGpuFenceCHROMIUM(gpu_fence_id);
 }
 
+GLuint64 GLES2TraceImplementation::CreateSharedTexture(GLuint texture_id,
+                                                       GLsizei width,
+                                                       GLsizei height) {
+  TRACE_EVENT_BINARY_EFFICIENT0("gpu", "GLES2Trace::CreateSharedTexture");
+  return gl_->CreateSharedTexture(texture_id, width, height);
+}
+
+void GLES2TraceImplementation::LockSharedTexture(GLuint64 shared_handle) {
+  TRACE_EVENT_BINARY_EFFICIENT0("gpu", "GLES2Trace::LockSharedTexture");
+  gl_->LockSharedTexture(shared_handle);
+}
+
+void GLES2TraceImplementation::UnlockSharedTexture(GLuint64 shared_handle) {
+  TRACE_EVENT_BINARY_EFFICIENT0("gpu", "GLES2Trace::UnlockSharedTexture");
+  gl_->UnlockSharedTexture(shared_handle);
+}
+
+void GLES2TraceImplementation::DeleteSharedTexture(GLuint64 shared_handle) {
+  TRACE_EVENT_BINARY_EFFICIENT0("gpu", "GLES2Trace::DeleteSharedTexture");
+  gl_->DeleteSharedTexture(shared_handle);
+}
+
 void GLES2TraceImplementation::InvalidateReadbackBufferShadowDataCHROMIUM(
     GLuint buffer_id) {
   TRACE_EVENT_BINARY_EFFICIENT0(
diff --git gpu/command_buffer/common/gles2_cmd_format_autogen.h gpu/command_buffer/common/gles2_cmd_format_autogen.h
index 29c250c4f82f..8255cacba216 100644
--- gpu/command_buffer/common/gles2_cmd_format_autogen.h
+++ gpu/command_buffer/common/gles2_cmd_format_autogen.h
@@ -16533,6 +16533,193 @@ static_assert(offsetof(DestroyGpuFenceCHROMIUM, header) == 0,
 static_assert(offsetof(DestroyGpuFenceCHROMIUM, gpu_fence_id) == 4,
               "offset of DestroyGpuFenceCHROMIUM gpu_fence_id should be 4");
 
+struct CreateSharedTexture {
+  typedef CreateSharedTexture ValueType;
+  static const CommandId kCmdId = kCreateSharedTexture;
+  static const cmd::ArgFlags kArgFlags = cmd::kFixed;
+  static const uint8_t cmd_flags = CMD_FLAG_SET_TRACE_LEVEL(3);
+
+  typedef GLuint64 Result;
+
+  static uint32_t ComputeSize() {
+    return static_cast<uint32_t>(sizeof(ValueType));  // NOLINT
+  }
+
+  void SetHeader() { header.SetCmd<ValueType>(); }
+
+  void Init(GLint _texture_id,
+            GLint _width,
+            GLint _height,
+            uint32_t _result_shm_id,
+            uint32_t _result_shm_offset) {
+    SetHeader();
+    texture_id = _texture_id;
+    width = _width;
+    height = _height;
+    result_shm_id = _result_shm_id;
+    result_shm_offset = _result_shm_offset;
+  }
+
+  void* Set(void* cmd,
+            GLint _texture_id,
+            GLint _width,
+            GLint _height,
+            uint32_t _result_shm_id,
+            uint32_t _result_shm_offset) {
+    static_cast<ValueType*>(cmd)->Init(_texture_id, _width, _height,
+                                       _result_shm_id, _result_shm_offset);
+    return NextCmdAddress<ValueType>(cmd);
+  }
+
+  gpu::CommandHeader header;
+  int32_t texture_id;
+  int32_t width;
+  int32_t height;
+  uint32_t result_shm_id;
+  uint32_t result_shm_offset;
+};
+
+static_assert(sizeof(CreateSharedTexture) == 24,
+              "size of CreateSharedTexture should be 24");
+static_assert(offsetof(CreateSharedTexture, header) == 0,
+              "offset of CreateSharedTexture header should be 0");
+static_assert(offsetof(CreateSharedTexture, texture_id) == 4,
+              "offset of CreateSharedTexture texture_id should be 4");
+static_assert(offsetof(CreateSharedTexture, width) == 8,
+              "offset of CreateSharedTexture width should be 8");
+static_assert(offsetof(CreateSharedTexture, height) == 12,
+              "offset of CreateSharedTexture height should be 12");
+static_assert(offsetof(CreateSharedTexture, result_shm_id) == 16,
+              "offset of CreateSharedTexture result_shm_id should be 16");
+static_assert(offsetof(CreateSharedTexture, result_shm_offset) == 20,
+              "offset of CreateSharedTexture result_shm_offset should be 20");
+
+struct LockSharedTexture {
+  typedef LockSharedTexture ValueType;
+  static const CommandId kCmdId = kLockSharedTexture;
+  static const cmd::ArgFlags kArgFlags = cmd::kFixed;
+  static const uint8_t cmd_flags = CMD_FLAG_SET_TRACE_LEVEL(3);
+
+  static uint32_t ComputeSize() {
+    return static_cast<uint32_t>(sizeof(ValueType));  // NOLINT
+  }
+
+  void SetHeader() { header.SetCmd<ValueType>(); }
+
+  void Init(GLuint64 _shared_handle) {
+    SetHeader();
+    GLES2Util::MapUint64ToTwoUint32(static_cast<uint64_t>(_shared_handle),
+                                    &shared_handle_0, &shared_handle_1);
+  }
+
+  void* Set(void* cmd, GLuint64 _shared_handle) {
+    static_cast<ValueType*>(cmd)->Init(_shared_handle);
+    return NextCmdAddress<ValueType>(cmd);
+  }
+
+  GLuint64 shared_handle() const volatile {
+    return static_cast<GLuint64>(
+        GLES2Util::MapTwoUint32ToUint64(shared_handle_0, shared_handle_1));
+  }
+
+  gpu::CommandHeader header;
+  uint32_t shared_handle_0;
+  uint32_t shared_handle_1;
+};
+
+static_assert(sizeof(LockSharedTexture) == 12,
+              "size of LockSharedTexture should be 12");
+static_assert(offsetof(LockSharedTexture, header) == 0,
+              "offset of LockSharedTexture header should be 0");
+static_assert(offsetof(LockSharedTexture, shared_handle_0) == 4,
+              "offset of LockSharedTexture shared_handle_0 should be 4");
+static_assert(offsetof(LockSharedTexture, shared_handle_1) == 8,
+              "offset of LockSharedTexture shared_handle_1 should be 8");
+
+struct UnlockSharedTexture {
+  typedef UnlockSharedTexture ValueType;
+  static const CommandId kCmdId = kUnlockSharedTexture;
+  static const cmd::ArgFlags kArgFlags = cmd::kFixed;
+  static const uint8_t cmd_flags = CMD_FLAG_SET_TRACE_LEVEL(3);
+
+  static uint32_t ComputeSize() {
+    return static_cast<uint32_t>(sizeof(ValueType));  // NOLINT
+  }
+
+  void SetHeader() { header.SetCmd<ValueType>(); }
+
+  void Init(GLuint64 _shared_handle) {
+    SetHeader();
+    GLES2Util::MapUint64ToTwoUint32(static_cast<uint64_t>(_shared_handle),
+                                    &shared_handle_0, &shared_handle_1);
+  }
+
+  void* Set(void* cmd, GLuint64 _shared_handle) {
+    static_cast<ValueType*>(cmd)->Init(_shared_handle);
+    return NextCmdAddress<ValueType>(cmd);
+  }
+
+  GLuint64 shared_handle() const volatile {
+    return static_cast<GLuint64>(
+        GLES2Util::MapTwoUint32ToUint64(shared_handle_0, shared_handle_1));
+  }
+
+  gpu::CommandHeader header;
+  uint32_t shared_handle_0;
+  uint32_t shared_handle_1;
+};
+
+static_assert(sizeof(UnlockSharedTexture) == 12,
+              "size of UnlockSharedTexture should be 12");
+static_assert(offsetof(UnlockSharedTexture, header) == 0,
+              "offset of UnlockSharedTexture header should be 0");
+static_assert(offsetof(UnlockSharedTexture, shared_handle_0) == 4,
+              "offset of UnlockSharedTexture shared_handle_0 should be 4");
+static_assert(offsetof(UnlockSharedTexture, shared_handle_1) == 8,
+              "offset of UnlockSharedTexture shared_handle_1 should be 8");
+
+struct DeleteSharedTexture {
+  typedef DeleteSharedTexture ValueType;
+  static const CommandId kCmdId = kDeleteSharedTexture;
+  static const cmd::ArgFlags kArgFlags = cmd::kFixed;
+  static const uint8_t cmd_flags = CMD_FLAG_SET_TRACE_LEVEL(3);
+
+  static uint32_t ComputeSize() {
+    return static_cast<uint32_t>(sizeof(ValueType));  // NOLINT
+  }
+
+  void SetHeader() { header.SetCmd<ValueType>(); }
+
+  void Init(GLuint64 _shared_handle) {
+    SetHeader();
+    GLES2Util::MapUint64ToTwoUint32(static_cast<uint64_t>(_shared_handle),
+                                    &shared_handle_0, &shared_handle_1);
+  }
+
+  void* Set(void* cmd, GLuint64 _shared_handle) {
+    static_cast<ValueType*>(cmd)->Init(_shared_handle);
+    return NextCmdAddress<ValueType>(cmd);
+  }
+
+  GLuint64 shared_handle() const volatile {
+    return static_cast<GLuint64>(
+        GLES2Util::MapTwoUint32ToUint64(shared_handle_0, shared_handle_1));
+  }
+
+  gpu::CommandHeader header;
+  uint32_t shared_handle_0;
+  uint32_t shared_handle_1;
+};
+
+static_assert(sizeof(DeleteSharedTexture) == 12,
+              "size of DeleteSharedTexture should be 12");
+static_assert(offsetof(DeleteSharedTexture, header) == 0,
+              "offset of DeleteSharedTexture header should be 0");
+static_assert(offsetof(DeleteSharedTexture, shared_handle_0) == 4,
+              "offset of DeleteSharedTexture shared_handle_0 should be 4");
+static_assert(offsetof(DeleteSharedTexture, shared_handle_1) == 8,
+              "offset of DeleteSharedTexture shared_handle_1 should be 8");
+
 struct SetReadbackBufferShadowAllocationINTERNAL {
   typedef SetReadbackBufferShadowAllocationINTERNAL ValueType;
   static const CommandId kCmdId = kSetReadbackBufferShadowAllocationINTERNAL;
diff --git gpu/command_buffer/common/gles2_cmd_format_test_autogen.h gpu/command_buffer/common/gles2_cmd_format_test_autogen.h
index ad5eec73afb5..a014852dac6d 100644
--- gpu/command_buffer/common/gles2_cmd_format_test_autogen.h
+++ gpu/command_buffer/common/gles2_cmd_format_test_autogen.h
@@ -5472,6 +5472,52 @@ TEST_F(GLES2FormatTest, DestroyGpuFenceCHROMIUM) {
   CheckBytesWrittenMatchesExpectedSize(next_cmd, sizeof(cmd));
 }
 
+TEST_F(GLES2FormatTest, CreateSharedTexture) {
+  cmds::CreateSharedTexture& cmd = *GetBufferAs<cmds::CreateSharedTexture>();
+  void* next_cmd = cmd.Set(&cmd, static_cast<GLint>(11), static_cast<GLint>(12),
+                           static_cast<GLint>(13), static_cast<uint32_t>(14),
+                           static_cast<uint32_t>(15));
+  EXPECT_EQ(static_cast<uint32_t>(cmds::CreateSharedTexture::kCmdId),
+            cmd.header.command);
+  EXPECT_EQ(sizeof(cmd), cmd.header.size * 4u);
+  EXPECT_EQ(static_cast<GLint>(11), cmd.texture_id);
+  EXPECT_EQ(static_cast<GLint>(12), cmd.width);
+  EXPECT_EQ(static_cast<GLint>(13), cmd.height);
+  EXPECT_EQ(static_cast<uint32_t>(14), cmd.result_shm_id);
+  EXPECT_EQ(static_cast<uint32_t>(15), cmd.result_shm_offset);
+  CheckBytesWrittenMatchesExpectedSize(next_cmd, sizeof(cmd));
+}
+
+TEST_F(GLES2FormatTest, LockSharedTexture) {
+  cmds::LockSharedTexture& cmd = *GetBufferAs<cmds::LockSharedTexture>();
+  void* next_cmd = cmd.Set(&cmd, static_cast<GLuint64>(11));
+  EXPECT_EQ(static_cast<uint32_t>(cmds::LockSharedTexture::kCmdId),
+            cmd.header.command);
+  EXPECT_EQ(sizeof(cmd), cmd.header.size * 4u);
+  EXPECT_EQ(static_cast<GLuint64>(11), cmd.shared_handle());
+  CheckBytesWrittenMatchesExpectedSize(next_cmd, sizeof(cmd));
+}
+
+TEST_F(GLES2FormatTest, UnlockSharedTexture) {
+  cmds::UnlockSharedTexture& cmd = *GetBufferAs<cmds::UnlockSharedTexture>();
+  void* next_cmd = cmd.Set(&cmd, static_cast<GLuint64>(11));
+  EXPECT_EQ(static_cast<uint32_t>(cmds::UnlockSharedTexture::kCmdId),
+            cmd.header.command);
+  EXPECT_EQ(sizeof(cmd), cmd.header.size * 4u);
+  EXPECT_EQ(static_cast<GLuint64>(11), cmd.shared_handle());
+  CheckBytesWrittenMatchesExpectedSize(next_cmd, sizeof(cmd));
+}
+
+TEST_F(GLES2FormatTest, DeleteSharedTexture) {
+  cmds::DeleteSharedTexture& cmd = *GetBufferAs<cmds::DeleteSharedTexture>();
+  void* next_cmd = cmd.Set(&cmd, static_cast<GLuint64>(11));
+  EXPECT_EQ(static_cast<uint32_t>(cmds::DeleteSharedTexture::kCmdId),
+            cmd.header.command);
+  EXPECT_EQ(sizeof(cmd), cmd.header.size * 4u);
+  EXPECT_EQ(static_cast<GLuint64>(11), cmd.shared_handle());
+  CheckBytesWrittenMatchesExpectedSize(next_cmd, sizeof(cmd));
+}
+
 TEST_F(GLES2FormatTest, SetReadbackBufferShadowAllocationINTERNAL) {
   cmds::SetReadbackBufferShadowAllocationINTERNAL& cmd =
       *GetBufferAs<cmds::SetReadbackBufferShadowAllocationINTERNAL>();
diff --git gpu/command_buffer/common/gles2_cmd_ids_autogen.h gpu/command_buffer/common/gles2_cmd_ids_autogen.h
index 5d8a91314bc9..fab65ac82ea2 100644
--- gpu/command_buffer/common/gles2_cmd_ids_autogen.h
+++ gpu/command_buffer/common/gles2_cmd_ids_autogen.h
@@ -345,9 +345,13 @@
   OP(CreateGpuFenceINTERNAL)                               /* 586 */ \
   OP(WaitGpuFenceCHROMIUM)                                 /* 587 */ \
   OP(DestroyGpuFenceCHROMIUM)                              /* 588 */ \
-  OP(SetReadbackBufferShadowAllocationINTERNAL)            /* 589 */ \
-  OP(FramebufferTextureMultiviewLayeredANGLE)              /* 590 */ \
-  OP(MaxShaderCompilerThreadsKHR)                          /* 591 */
+  OP(CreateSharedTexture)                                  /* 589 */ \
+  OP(LockSharedTexture)                                    /* 590 */ \
+  OP(UnlockSharedTexture)                                  /* 591 */ \
+  OP(DeleteSharedTexture)                                  /* 592 */ \
+  OP(SetReadbackBufferShadowAllocationINTERNAL)            /* 593 */ \
+  OP(FramebufferTextureMultiviewLayeredANGLE)              /* 594 */ \
+  OP(MaxShaderCompilerThreadsKHR)                          /* 595 */
 
 enum CommandId {
   kOneBeforeStartPoint =
diff --git gpu/command_buffer/gles2_cmd_buffer_functions.txt gpu/command_buffer/gles2_cmd_buffer_functions.txt
index fcac46f25274..cb39feed2c16 100644
--- gpu/command_buffer/gles2_cmd_buffer_functions.txt
+++ gpu/command_buffer/gles2_cmd_buffer_functions.txt
@@ -395,6 +395,12 @@ GL_APICALL GLuint       GL_APIENTRY glCreateClientGpuFenceCHROMIUM (ClientGpuFen
 GL_APICALL void         GL_APIENTRY glWaitGpuFenceCHROMIUM (GLuint gpu_fence_id);
 GL_APICALL void         GL_APIENTRY glDestroyGpuFenceCHROMIUM (GLuint gpu_fence_id);
 
+// shared handle extensions
+GL_APICALL GLuint64     GL_APIENTRY glCreateSharedTexture (GLuint texture_id, GLsizei width, GLsizei height);
+GL_APICALL void         GL_APIENTRY glLockSharedTexture (GLuint64 shared_handle);
+GL_APICALL void         GL_APIENTRY glUnlockSharedTexture (GLuint64 shared_handle);
+GL_APICALL void         GL_APIENTRY glDeleteSharedTexture (GLuint64 shared_handle);
+
 // Extension CHROMIUM_nonblocking_readback
 GL_APICALL void         GL_APIENTRY glInvalidateReadbackBufferShadowDataCHROMIUM (GLidBuffer buffer_id);
 // (used for CHROMIUM_nonblocking_readback implementation)
diff --git gpu/command_buffer/service/BUILD.gn gpu/command_buffer/service/BUILD.gn
index 6e83a5675fc3..330107d93f03 100644
--- gpu/command_buffer/service/BUILD.gn
+++ gpu/command_buffer/service/BUILD.gn
@@ -105,6 +105,8 @@ target(link_target_type, "gles2_sources") {
   visibility = [ "//gpu/*" ]
 
   sources = [
+    "//cef/libcef/browser/gpu/external_texture_manager.cc",
+    "//cef/libcef/browser/gpu/external_texture_manager.h",
     "abstract_texture.h",
     "buffer_manager.cc",
     "buffer_manager.h",
diff --git gpu/command_buffer/service/gles2_cmd_decoder.cc gpu/command_buffer/service/gles2_cmd_decoder.cc
index 3cb45cc5b191..f17002799aa6 100644
--- gpu/command_buffer/service/gles2_cmd_decoder.cc
+++ gpu/command_buffer/service/gles2_cmd_decoder.cc
@@ -34,6 +34,7 @@
 #include "base/strings/stringprintf.h"
 #include "base/trace_event/trace_event.h"
 #include "build/build_config.h"
+#include "cef/libcef/browser/gpu/external_texture_manager.h"
 #include "gpu/command_buffer/common/debug_marker_manager.h"
 #include "gpu/command_buffer/common/gles2_cmd_format.h"
 #include "gpu/command_buffer/common/gles2_cmd_utils.h"
@@ -857,6 +858,13 @@ class GLES2DecoderImpl : public GLES2Decoder, public ErrorStateClient {
     return group_->mailbox_manager();
   }
 
+  ExternalTextureManager* external_texture_manager() {
+    if (!external_texture_manager_.get()) {
+      external_texture_manager_.reset(new gles2::ExternalTextureManager());
+    }
+    return external_texture_manager_.get();
+  }
+
   ImageManager* image_manager() { return group_->image_manager(); }
 
   VertexArrayManager* vertex_array_manager() {
@@ -2497,6 +2505,8 @@ class GLES2DecoderImpl : public GLES2Decoder, public ErrorStateClient {
 
   std::unique_ptr<VertexArrayManager> vertex_array_manager_;
 
+  std::unique_ptr<ExternalTextureManager> external_texture_manager_;
+
   base::flat_set<scoped_refptr<Buffer>> writes_submitted_but_not_completed_;
 
   // The format of the back buffer_
@@ -5353,6 +5363,59 @@ error::Error GLES2DecoderImpl::HandleDestroyGpuFenceCHROMIUM(
   return error::kNoError;
 }
 
+error::Error GLES2DecoderImpl::HandleCreateSharedTexture(
+    uint32_t immediate_data_size,
+    const volatile void* cmd_data) {
+  const volatile gles2::cmds::CreateSharedTexture& c =
+      *static_cast<const volatile gles2::cmds::CreateSharedTexture*>(cmd_data);
+  GLuint texture_id = c.texture_id;
+  uint32_t width = c.width;
+  uint32_t height = c.height;
+
+  typedef cmds::CreateSharedTexture::Result Result;
+  Result* result_dst = GetSharedMemoryAs<Result*>(
+      c.result_shm_id, c.result_shm_offset, sizeof(*result_dst));
+  if (!result_dst) {
+    return error::kOutOfBounds;
+  }
+
+  void* shared_handle = external_texture_manager()->CreateTexture(
+      texture_id, width, height, texture_manager());
+
+  *result_dst = (GLuint64)(shared_handle);
+  return error::kNoError;
+}
+
+error::Error GLES2DecoderImpl::HandleLockSharedTexture(
+    uint32_t immediate_data_size,
+    const volatile void* cmd_data) {
+  const volatile gles2::cmds::LockSharedTexture& c =
+      *static_cast<const volatile gles2::cmds::LockSharedTexture*>(cmd_data);
+  void* handle = (void*)(c.shared_handle());
+  external_texture_manager()->LockTexture(handle);
+  return error::kNoError;
+}
+
+error::Error GLES2DecoderImpl::HandleUnlockSharedTexture(
+    uint32_t immediate_data_size,
+    const volatile void* cmd_data) {
+  const volatile gles2::cmds::UnlockSharedTexture& c =
+      *static_cast<const volatile gles2::cmds::UnlockSharedTexture*>(cmd_data);
+  void* handle = (void*)(c.shared_handle());
+  external_texture_manager()->UnlockTexture(handle);
+  return error::kNoError;
+}
+
+error::Error GLES2DecoderImpl::HandleDeleteSharedTexture(
+    uint32_t immediate_data_size,
+    const volatile void* cmd_data) {
+  const volatile gles2::cmds::DeleteSharedTexture& c =
+      *static_cast<const volatile gles2::cmds::DeleteSharedTexture*>(cmd_data);
+  void* handle = (void*)(c.shared_handle());
+  external_texture_manager()->DeleteTexture(handle, texture_manager());
+  return error::kNoError;
+}
+
 void GLES2DecoderImpl::CreateBackTexture() {
   for (auto it = saved_back_textures_.begin(); it != saved_back_textures_.end();
        ++it) {
diff --git gpu/command_buffer/service/gles2_cmd_decoder_passthrough.cc gpu/command_buffer/service/gles2_cmd_decoder_passthrough.cc
index e4b21a6a1388..c446c9ef3297 100644
--- gpu/command_buffer/service/gles2_cmd_decoder_passthrough.cc
+++ gpu/command_buffer/service/gles2_cmd_decoder_passthrough.cc
@@ -9,6 +9,7 @@
 
 #include "base/callback.h"
 #include "base/strings/string_split.h"
+#include "cef/libcef/browser/gpu/external_texture_manager.h"
 #include "gpu/command_buffer/service/command_buffer_service.h"
 #include "gpu/command_buffer/service/decoder_client.h"
 #include "gpu/command_buffer/service/feature_info.h"
@@ -2275,6 +2276,67 @@ error::Error GLES2DecoderPassthroughImpl::CheckSwapBuffersResult(
   return error::kNoError;
 }
 
+ExternalTextureManager*
+GLES2DecoderPassthroughImpl::external_texture_manager() {
+  if (!external_texture_manager_.get()) {
+    external_texture_manager_.reset(new gles2::ExternalTextureManager());
+  }
+  return external_texture_manager_.get();
+}
+
+error::Error GLES2DecoderPassthroughImpl::HandleCreateSharedTexture(
+    uint32_t immediate_data_size,
+    const volatile void* cmd_data) {
+  const volatile gles2::cmds::CreateSharedTexture& c =
+      *static_cast<const volatile gles2::cmds::CreateSharedTexture*>(cmd_data);
+  GLuint texture_id = c.texture_id;
+  uint32_t width = c.width;
+  uint32_t height = c.height;
+
+  typedef cmds::CreateSharedTexture::Result Result;
+  Result* result_dst = GetSharedMemoryAs<Result*>(
+      c.result_shm_id, c.result_shm_offset, sizeof(*result_dst));
+  if (!result_dst) {
+    return error::kOutOfBounds;
+  }
+
+  void* shared_handle = external_texture_manager()->CreateTexture(
+      texture_id, width, height, nullptr);
+
+  *result_dst = (GLuint64)(shared_handle);
+  return error::kNoError;
+}
+
+error::Error GLES2DecoderPassthroughImpl::HandleLockSharedTexture(
+    uint32_t immediate_data_size,
+    const volatile void* cmd_data) {
+  const volatile gles2::cmds::LockSharedTexture& c =
+      *static_cast<const volatile gles2::cmds::LockSharedTexture*>(cmd_data);
+  void* handle = (void*)(c.shared_handle());
+  external_texture_manager()->LockTexture(handle);
+  return error::kNoError;
+}
+
+error::Error GLES2DecoderPassthroughImpl::HandleUnlockSharedTexture(
+    uint32_t immediate_data_size,
+    const volatile void* cmd_data) {
+  const volatile gles2::cmds::UnlockSharedTexture& c =
+      *static_cast<const volatile gles2::cmds::UnlockSharedTexture*>(cmd_data);
+  void* handle = (void*)(c.shared_handle());
+  external_texture_manager()->UnlockTexture(handle);
+  return error::kNoError;
+}
+
+error::Error GLES2DecoderPassthroughImpl::HandleDeleteSharedTexture(
+    uint32_t immediate_data_size,
+    const volatile void* cmd_data) {
+  const volatile gles2::cmds::DeleteSharedTexture& c =
+      *static_cast<const volatile gles2::cmds::DeleteSharedTexture*>(cmd_data);
+  void* handle = (void*)(c.shared_handle());
+  external_texture_manager()->DeleteTexture(handle, nullptr);
+  return error::kNoError;
+}
+
 // static
 GLES2DecoderPassthroughImpl::TextureTarget
 GLES2DecoderPassthroughImpl::GLenumToTextureTarget(GLenum target) {
diff --git gpu/command_buffer/service/gles2_cmd_decoder_passthrough.h gpu/command_buffer/service/gles2_cmd_decoder_passthrough.h
index 325918d2264a..cdb97f7dc914 100644
--- gpu/command_buffer/service/gles2_cmd_decoder_passthrough.h
+++ gpu/command_buffer/service/gles2_cmd_decoder_passthrough.h
@@ -42,6 +42,7 @@ namespace gpu {
 namespace gles2 {
 
 class ContextGroup;
+class ExternalTextureManager;
 class GPUTracer;
 class PassthroughAbstractTextureImpl;
 
@@ -361,6 +362,8 @@ class GPU_GLES2_EXPORT GLES2DecoderPassthroughImpl : public GLES2Decoder {
 
   void SetOptionalExtensionsRequestedForTesting(bool request_extensions);
 
+  ExternalTextureManager* external_texture_manager();
+
   void* GetScratchMemory(size_t size);
 
   template <typename T>
@@ -554,6 +557,8 @@ class GPU_GLES2_EXPORT GLES2DecoderPassthroughImpl : public GLES2Decoder {
 
   std::unique_ptr<GpuFenceManager> gpu_fence_manager_;
 
+  std::unique_ptr<ExternalTextureManager> external_texture_manager_;
+
   // State tracking of currently bound 2D textures (client IDs)
   size_t active_texture_unit_;
 
diff --git ui/compositor/compositor.cc ui/compositor/compositor.cc
index 8ae7efefd62c..9b89edf36be5 100644
--- ui/compositor/compositor.cc
+++ ui/compositor/compositor.cc
@@ -540,6 +540,16 @@ void Compositor::OnNeedsExternalBeginFrames(bool needs_begin_frames) {
   needs_external_begin_frames_ = needs_begin_frames;
 }
 
+void* Compositor::GetSharedTexture() {
+  if (context_factory_private_)
+    return context_factory_private_->GetSharedTexture(this);
+  return nullptr;
+}
+
+void Compositor::EnableSharedTexture(bool enable) {
+  shared_texture_enabled_ = enable;
+}
+
 void Compositor::AddObserver(CompositorObserver* observer) {
   observer_list_.AddObserver(observer);
 }
diff --git ui/compositor/compositor.h ui/compositor/compositor.h
index b3905bdfa650..dc984321f2b8 100644
--- ui/compositor/compositor.h
+++ ui/compositor/compositor.h
@@ -26,6 +26,7 @@
 #include "components/viz/common/surfaces/frame_sink_id.h"
 #include "components/viz/common/surfaces/local_surface_id.h"
 #include "components/viz/host/host_frame_sink_client.h"
+#include "components/viz/service/display/software_output_device.h"
 #include "third_party/skia/include/core/SkColor.h"
 #include "third_party/skia/include/core/SkMatrix44.h"
 #include "ui/compositor/compositor_animation_observer.h"
@@ -160,6 +161,8 @@ class COMPOSITOR_EXPORT ContextFactoryPrivate {
                                        const viz::BeginFrameArgs& args) = 0;
 
   virtual void SetOutputIsSecure(Compositor* compositor, bool secure) = 0;
+
+  virtual void* GetSharedTexture(ui::Compositor* compositor) = 0;
 };
 
 // This class abstracts the creation of the 3D context for the compositor. It is
@@ -198,6 +201,17 @@ class COMPOSITOR_EXPORT ContextFactory {
   virtual bool SyncTokensRequiredForDisplayCompositor() = 0;
 };
 
+class COMPOSITOR_EXPORT CompositorDelegate {
+ public:
+  virtual std::unique_ptr<viz::SoftwareOutputDevice> CreateSoftwareOutputDevice(
+      ui::Compositor* compositor) {
+    return nullptr;
+  }
+
+ protected:
+  virtual ~CompositorDelegate() {}
+};
+
 // Compositor object to take care of GPU painting.
 // A Browser compositor object is responsible for generating the final
 // displayable form of pixels comprising a single widget's contents. It draws an
@@ -237,6 +251,9 @@ class COMPOSITOR_EXPORT Compositor : public cc::LayerTreeHostClient,
   // Schedules a redraw of the layer tree associated with this compositor.
   void ScheduleDraw();
 
+  CompositorDelegate* delegate() const { return delegate_; }
+  void SetDelegate(CompositorDelegate* delegate) { delegate_ = delegate; }
+
   // Sets the root of the layer tree drawn by this Compositor. The root layer
   // must have no parent. The compositor's root layer is reset if the root layer
   // is destroyed. NULL can be passed to reset the root layer, in which case the
@@ -348,6 +365,10 @@ class COMPOSITOR_EXPORT Compositor : public cc::LayerTreeHostClient,
     return task_runner_;
   }
 
+  void* GetSharedTexture();
+  void EnableSharedTexture(bool enable);
+  bool shared_texture_enabled() const { return shared_texture_enabled_; }
+
   // Compositor does not own observers. It is the responsibility of the
   // observer to remove itself when it is done observing.
   void AddObserver(CompositorObserver* observer);
@@ -448,6 +469,8 @@ class COMPOSITOR_EXPORT Compositor : public cc::LayerTreeHostClient,
   ui::ContextFactory* context_factory_;
   ui::ContextFactoryPrivate* context_factory_private_;
 
+  CompositorDelegate* delegate_ = nullptr;
+
   // The root of the Layer tree drawn by this compositor.
   Layer* root_layer_ = nullptr;
 
@@ -486,6 +509,8 @@ class COMPOSITOR_EXPORT Compositor : public cc::LayerTreeHostClient,
   ExternalBeginFrameClient* external_begin_frame_client_ = nullptr;
   bool needs_external_begin_frames_ = false;
 
+  bool shared_texture_enabled_ = false;
+
   const bool force_software_compositor_;
 
   // The device scale factor of the monitor that this compositor is compositing
diff --git ui/compositor/host/host_context_factory_private.cc ui/compositor/host/host_context_factory_private.cc
index 952525b7f823..871379326bc2 100644
--- ui/compositor/host/host_context_factory_private.cc
+++ ui/compositor/host/host_context_factory_private.cc
@@ -245,6 +245,10 @@ void HostContextFactoryPrivate::SetOutputIsSecure(Compositor* compositor,
     iter->second.display_private->SetOutputIsSecure(secure);
 }
 
+void* HostContextFactoryPrivate::GetSharedTexture(Compositor* /*compositor*/) {
+  return nullptr;
+}
+
 viz::FrameSinkManagerImpl* HostContextFactoryPrivate::GetFrameSinkManager() {
   // When running with viz there is no FrameSinkManagerImpl in the browser
   // process. FrameSinkManagerImpl runs in the GPU process instead. Anything in
diff --git ui/compositor/host/host_context_factory_private.h ui/compositor/host/host_context_factory_private.h
index 69a441e9fbc0..818ffac9fb37 100644
--- ui/compositor/host/host_context_factory_private.h
+++ ui/compositor/host/host_context_factory_private.h
@@ -72,6 +72,8 @@ class HostContextFactoryPrivate : public ContextFactoryPrivate {
   void SetOutputIsSecure(Compositor* compositor, bool secure) override;
   viz::FrameSinkManagerImpl* GetFrameSinkManager() override;
 
+  void* GetSharedTexture(ui::Compositor* compositor) override;
+
  protected:
   void set_is_gpu_compositing_disabled(bool value) {
     is_gpu_compositing_disabled_ = value;
